// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  HR
  ADMIN
  HEAD
}

model User {
  id             Int      @id @default(autoincrement())
  fullName       String
  age            Int
  departmentName String
  position       String
  email          String   @unique
  password       String
  phoneNumber    String   @unique
  role           Role     @default(EMPLOYEE)
  statusEmployee String   @default("Unverified")
  joiningDate    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  statusAccount  String   @default("pending")

  tasks     Task[]
  absences  Absence[]
  schedules Schedule[]

  leaves    Leave[]

  notificationsSent Notification[] @relation("UserSentNotifications")

  managedSchedules Schedule[]  @relation("ScheduleManager")
  department       Department  @relation("DepartmentEmployees", fields: [departmentName], references: [name])
  headOfDepartment Department? @relation("DepartmentHead")
}

model Department {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  headId        Int?     @unique
  employeeCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employees      User[] @relation("DepartmentEmployees")
  departmentHead User?  @relation("DepartmentHead", fields: [headId], references: [id])
  tasks          Task[] @relation("DepartmentTasks")
}

model Absence {
  id           Int       @id @default(autoincrement())
  userId       Int
  date         DateTime
  reason       String    @default("")
  checkin      DateTime?
  checkout     DateTime?
  workHours    Int?
  status       String    @default("present")
  isLeave      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  barcodes Barcode[]
}

model Leave {
  id        Int      @id @default(autoincrement())
  userId    Int
  leaveAmmount Int       @default(12)
  leaveTotal   Int       @default(0)

  user User @relation(fields: [userId], references: [id])
  notifications Notification[] @relation("LeaveNotifications")
}

model Barcode {
  id        Int      @id @default(autoincrement())
  barcode   String   @unique
  date      DateTime @default(now())
  absenceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  absence Absence @relation(fields: [absenceId], references: [id])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  managerId Int
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User                    @relation(fields: [userId], references: [id])
  manager        User                    @relation("ScheduleManager", fields: [managerId], references: [id])
  scheduleTasks  ScheduleTask[]
}

model ScheduleTask {
  scheduleId Int
  taskId     Int

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  task     Task     @relation(fields: [taskId], references: [id])

  @@id([scheduleId, taskId])
}

model Task {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  status       String   @default("pending")
  assignedTo   Int
  departmentId Int
  assignedDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User           @relation(fields: [assignedTo], references: [id])
  department    Department     @relation("DepartmentTasks", fields: [departmentId], references: [id])
  scheduleTasks ScheduleTask[]
}

model Notification {
  id           Int      @id @default(autoincrement())
  senderId     Int
  receiverId   Int?
  receiverRole Role     @default(HR)
  type         String   @default("schedule change") // e.g., "schedule change", "leave request"
  message      String
  status       String   @default("unread")          // e.g., "unread", "read", "approved", "rejected"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Optional data depending on the type
  scheduleId       Int?      // if related to schedule
  originalDate     DateTime? // e.g., originalDate for schedule change
  relatedDate      DateTime? // e.g., leaveDate, scheduleDate
  replacementDate  DateTime? // for schedule change
  shiftStart       DateTime? // optional shift detail
  shiftEnd         DateTime? // optional shift detail
  replyMessage     String?   

  leaveId          Int?      
  leave            Leave?    @relation("LeaveNotifications", fields: [leaveId], references: [id])
  sender           User      @relation("UserSentNotifications", fields: [senderId], references: [id])
}